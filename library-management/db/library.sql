START TRANSACTION;

-- DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users (
  id VARCHAR(320) NOT NULL,
  password VARCHAR(60) NOT NULL,
  firstname VARCHAR(30) NOT NULL,
  lastname VARCHAR(30) NOT NULL,
  role ENUM('USER', 'ADMIN') NOT NULL,
  salt VARCHAR(60) NOT NULL,

  PRIMARY KEY (id)
);

-- DROP TABLE IF EXISTS books;
-- DROP TABLE IF EXISTS genres;
CREATE TABLE IF NOT EXISTS genres (
  id INT(3) UNSIGNED NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,

  PRIMARY KEY (id)
);
-- INSERT INTO genres (name) VALUES ('None');

-- DROP TABLE IF EXISTS books;
CREATE TABLE IF NOT EXISTS books (    
  id VARCHAR(17) NOT NULL,
  title VARCHAR(255) NOT NULL,
  author VARCHAR(255) NOT NULL,
  year VARCHAR(7),
  quantity INT(7) UNSIGNED NOT NULL,
  genre_id INT(3) UNSIGNED NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (genre_id) REFERENCES genres(id)
);

-- DROP TABLE IF EXISTS borrows;
CREATE TABLE IF NOT EXISTS borrows (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  startdate DATE NOT NULL DEFAULT CURRENT_DATE,
  enddate DATE NOT NULL,
  user_id VARCHAR(320) NOT NULL,
  book_id VARCHAR(17) NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (book_id) REFERENCES books(id)
);

-- DROP TABLE IF EXISTS transactions;
CREATE TABLE IF NOT EXISTS transactions (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  type ENUM('ADD', 'UPDATE', 'DELETE', 'BORROW', 'RETURN') NOT NULL,
  datetime DATETIME NOT NULL DEFAULT CURRENT_DATE,
  user_id VARCHAR(320) NOT NULL,
  tablename VARCHAR(255) NOT NULL,
  other_id VARCHAR(320) NOT NULL,

  PRIMARY KEY (id)
);

COMMIT;